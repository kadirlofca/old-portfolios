---
import type { CollectionEntry } from "astro:content";
import ProjectChip from "./ProjectChip.astro";

interface Props {
  project: CollectionEntry<"projects">;
}

const { project } = Astro.props;
const slug = project.slug;
const { Content } = await project.render();
---

<div id={slug}>
  <input type="radio" name="projectCard" id={slug + "-input"} class="peer hidden" />
  <label
    for={slug + "-input"}
    class="block sticky top-0 mt-kin-base mb-0 p-kin-lg peer-checked:pb-0 duration-0 rounded-md bg-gradient-to-br from-heights-2 to-heights-1 border-2 border-transparent cursor-pointer peer-checked:cursor-default peer-checked:rounded-b-none hover:border-heights-3 peer-checked:border-heights-2-half peer-checked:border-b-0 peer-checked:to-heights-2"
  >
    <div class="flex flex-col md:flex-row">
      <div class="flex-1">
        <h3>{project.data.role}</h3>
        <h2>{project.data.title}</h2>
        <p>{project.data.description}</p>
      </div>
      <div class="flex flex-row flex-wrap mt-2 gap-kin-max md:mt-0 md:flex-row-reverse md:max-w-[40%] lg:max-w-[35%]">
        {project.data.chips.length != 0 && project.data.chips.map((chip) => <ProjectChip text={chip} />)}
      </div>
    </div>
  </label>
  <div class="hidden p-kin-lg pt-0 bg-heights-2 peer-checked:block rounded-b-md text-heights-5 border-2 border-t-0 peer-checked:border-heights-2-half peer-checked:border-t-0">
    <Content />
  </div>
</div>

<script define:vars={{ slug }}>
  const element = document.getElementById(slug);
  const inputElemenet = document.getElementById(slug + "-input");

  element.addEventListener("click", () => {
    if (inputElemenet.checked) {
      return;
    }

    element?.scrollIntoView(true);
  });
</script>
